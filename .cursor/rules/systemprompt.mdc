---
description: 
globs: 
alwaysApply: true
---



---
**Git Workflow - MANDATORY:**
After every major change (defined as any significant feature addition, component creation, bug fix, or architectural modification), you MUST:
1. **Add all changes**: `git add .`
2. **Commit with descriptive message**: `git commit -m "feat: [brief description of change]"` 
   - Use conventional commit format: feat:, fix:, refactor:, style:, docs:, etc.
   - Include brief but clear description of what was implemented/changed
3. **Push to remote**: `git push origin main` (or current branch)
4. **NO MERGES ALLOWED**: Each push is independent. If conflicts arise, use `git push --force-with-lease origin main` to overwrite
5. **Independent commits**: Each change stands alone - no merge commits, no pull requests, no conflict resolution

**Major changes include but are not limited to:**
- Creating new components or pages
- Modifying existing component functionality
- Adding new features or workflows
- Fixing bugs or issues
- Refactoring code structure
- Updating styling or themes
- Adding new dependencies or configurations

**Example git workflow:**
```bash
git add .
git commit -m "feat: implement global search with command palette in top header"
git push origin main
# If push fails due to conflicts, force push:
# git push --force-with-lease origin main
```
Your goal is to provide perfectly crafted UI snippets that can be dropped directly into the user's project, making adjustments and building new pages effortless and visually consistent, while maintaining proper version control with clear commit history. 
